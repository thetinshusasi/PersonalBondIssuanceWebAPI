{
  "contractName": "Counter",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides an incrementing uint256 id acquired by the `Counter#next` getter. Use this for issuing ERC721 ids or keeping track of request ids, anything you want, really. * Include with `using Counter for Counter.Counter;`\",\"methods\":{},\"title\":\"Counter\"},\"userdoc\":{\"methods\":{},\"notice\":\"Does not allow an Id of 0, which is popularly used to signify a null state in solidity. Does not protect from overflows, but if you have 2^256 ids, you have other problems. (But actually, it's generally impossible to increment a counter this many times, energy wise so it's not something you have to worry about.)\"}},\"settings\":{\"compilationTarget\":{\"/d/Test Code/C#/Web Api/BondTemp/PersonalBondIssuanceWebAPI/BondIssuance.SmartContracts/SmartContracts/contracts/openzeppelin/drafts/Counter.sol\":\"Counter\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/d/Test Code/C#/Web Api/BondTemp/PersonalBondIssuanceWebAPI/BondIssuance.SmartContracts/SmartContracts/contracts/openzeppelin/drafts/Counter.sol\":{\"keccak256\":\"0x63b1da83494b9bf7c7052559cd713e9acf9e57db006b8499182a31728f0bc47e\",\"urls\":[\"bzzr://e3d2011aefcfd8b2ef170182bec3ab48075565b61c7ab1bedb2da38df59e6559\"]}},\"version\":1}",
  "bytecode": "0x604c6023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820aecce2fc7573d40a0325c135d9833826a8d624d329e213aae92222a3ad08d9cc0029",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820aecce2fc7573d40a0325c135d9833826a8d624d329e213aae92222a3ad08d9cc0029",
  "sourceMap": "652:220:8:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24",
  "deployedSourceMap": "652:220:8:-;;;;;;;;",
  "source": "pragma solidity ^0.5.0;\n\n/**\n * @title Counter\n * @author Matt Condon (@shrugs)\n * @dev Provides an incrementing uint256 id acquired by the `Counter#next` getter.\n * Use this for issuing ERC721 ids or keeping track of request ids, anything you want, really.\n *\n * Include with `using Counter for Counter.Counter;`\n * @notice Does not allow an Id of 0, which is popularly used to signify a null state in solidity.\n * Does not protect from overflows, but if you have 2^256 ids, you have other problems.\n * (But actually, it's generally impossible to increment a counter this many times, energy wise\n * so it's not something you have to worry about.)\n */\nlibrary Counter {\n    struct Counter {\n        uint256 current; // default: 0\n    }\n\n    function next(Counter storage index) internal returns (uint256) {\n        index.current += 1;\n        return index.current;\n    }\n}\n",
  "sourcePath": "d:/Test Code/C#/Web Api/BondTemp/PersonalBondIssuanceWebAPI/BondIssuance.SmartContracts/SmartContracts/contracts/openzeppelin/drafts/Counter.sol",
  "ast": {
    "absolutePath": "/d/Test Code/C#/Web Api/BondTemp/PersonalBondIssuanceWebAPI/BondIssuance.SmartContracts/SmartContracts/contracts/openzeppelin/drafts/Counter.sol",
    "exportedSymbols": {
      "Counter": [
        797
      ]
    },
    "id": 798,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 776,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:8"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": "@title Counter\n@author Matt Condon (@shrugs)\n@dev Provides an incrementing uint256 id acquired by the `Counter#next` getter.\nUse this for issuing ERC721 ids or keeping track of request ids, anything you want, really.\n * Include with `using Counter for Counter.Counter;`\n@notice Does not allow an Id of 0, which is popularly used to signify a null state in solidity.\nDoes not protect from overflows, but if you have 2^256 ids, you have other problems.\n(But actually, it's generally impossible to increment a counter this many times, energy wise\nso it's not something you have to worry about.)",
        "fullyImplemented": true,
        "id": 797,
        "linearizedBaseContracts": [
          797
        ],
        "name": "Counter",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "Counter.Counter",
            "id": 779,
            "members": [
              {
                "constant": false,
                "id": 778,
                "name": "current",
                "nodeType": "VariableDeclaration",
                "scope": 779,
                "src": "699:15:8",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 777,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "699:7:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "Counter",
            "nodeType": "StructDefinition",
            "scope": 797,
            "src": "674:61:8",
            "visibility": "public"
          },
          {
            "body": {
              "id": 795,
              "nodeType": "Block",
              "src": "805:65:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 790,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 786,
                        "name": "index",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 781,
                        "src": "815:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Counter_$779_storage_ptr",
                          "typeString": "struct Counter.Counter storage pointer"
                        }
                      },
                      "id": 788,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "current",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 778,
                      "src": "815:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "31",
                      "id": 789,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "832:1:8",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "815:18:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 791,
                  "nodeType": "ExpressionStatement",
                  "src": "815:18:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 792,
                      "name": "index",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 781,
                      "src": "850:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Counter_$779_storage_ptr",
                        "typeString": "struct Counter.Counter storage pointer"
                      }
                    },
                    "id": 793,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "current",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 778,
                    "src": "850:13:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 785,
                  "id": 794,
                  "nodeType": "Return",
                  "src": "843:20:8"
                }
              ]
            },
            "documentation": null,
            "id": 796,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "next",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 782,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 781,
                  "name": "index",
                  "nodeType": "VariableDeclaration",
                  "scope": 796,
                  "src": "755:21:8",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Counter_$779_storage_ptr",
                    "typeString": "struct Counter.Counter"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 780,
                    "name": "Counter",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 779,
                    "src": "755:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$779_storage_ptr",
                      "typeString": "struct Counter.Counter"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "754:23:8"
            },
            "returnParameters": {
              "id": 785,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 784,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 796,
                  "src": "796:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 783,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "796:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "795:9:8"
            },
            "scope": 797,
            "src": "741:129:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 798,
        "src": "652:220:8"
      }
    ],
    "src": "0:873:8"
  },
  "legacyAST": {
    "absolutePath": "/d/Test Code/C#/Web Api/BondTemp/PersonalBondIssuanceWebAPI/BondIssuance.SmartContracts/SmartContracts/contracts/openzeppelin/drafts/Counter.sol",
    "exportedSymbols": {
      "Counter": [
        797
      ]
    },
    "id": 798,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 776,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:8"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": "@title Counter\n@author Matt Condon (@shrugs)\n@dev Provides an incrementing uint256 id acquired by the `Counter#next` getter.\nUse this for issuing ERC721 ids or keeping track of request ids, anything you want, really.\n * Include with `using Counter for Counter.Counter;`\n@notice Does not allow an Id of 0, which is popularly used to signify a null state in solidity.\nDoes not protect from overflows, but if you have 2^256 ids, you have other problems.\n(But actually, it's generally impossible to increment a counter this many times, energy wise\nso it's not something you have to worry about.)",
        "fullyImplemented": true,
        "id": 797,
        "linearizedBaseContracts": [
          797
        ],
        "name": "Counter",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "Counter.Counter",
            "id": 779,
            "members": [
              {
                "constant": false,
                "id": 778,
                "name": "current",
                "nodeType": "VariableDeclaration",
                "scope": 779,
                "src": "699:15:8",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 777,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "699:7:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "Counter",
            "nodeType": "StructDefinition",
            "scope": 797,
            "src": "674:61:8",
            "visibility": "public"
          },
          {
            "body": {
              "id": 795,
              "nodeType": "Block",
              "src": "805:65:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 790,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 786,
                        "name": "index",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 781,
                        "src": "815:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Counter_$779_storage_ptr",
                          "typeString": "struct Counter.Counter storage pointer"
                        }
                      },
                      "id": 788,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "current",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 778,
                      "src": "815:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "31",
                      "id": 789,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "832:1:8",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "815:18:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 791,
                  "nodeType": "ExpressionStatement",
                  "src": "815:18:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 792,
                      "name": "index",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 781,
                      "src": "850:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Counter_$779_storage_ptr",
                        "typeString": "struct Counter.Counter storage pointer"
                      }
                    },
                    "id": 793,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "current",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 778,
                    "src": "850:13:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 785,
                  "id": 794,
                  "nodeType": "Return",
                  "src": "843:20:8"
                }
              ]
            },
            "documentation": null,
            "id": 796,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "next",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 782,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 781,
                  "name": "index",
                  "nodeType": "VariableDeclaration",
                  "scope": 796,
                  "src": "755:21:8",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Counter_$779_storage_ptr",
                    "typeString": "struct Counter.Counter"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 780,
                    "name": "Counter",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 779,
                    "src": "755:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$779_storage_ptr",
                      "typeString": "struct Counter.Counter"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "754:23:8"
            },
            "returnParameters": {
              "id": 785,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 784,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 796,
                  "src": "796:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 783,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "796:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "795:9:8"
            },
            "scope": 797,
            "src": "741:129:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 798,
        "src": "652:220:8"
      }
    ],
    "src": "0:873:8"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-06-29T02:29:37.805Z",
  "devdoc": {
    "author": "Matt Condon (@shrugs)",
    "details": "Provides an incrementing uint256 id acquired by the `Counter#next` getter. Use this for issuing ERC721 ids or keeping track of request ids, anything you want, really. * Include with `using Counter for Counter.Counter;`",
    "methods": {},
    "title": "Counter"
  },
  "userdoc": {
    "methods": {},
    "notice": "Does not allow an Id of 0, which is popularly used to signify a null state in solidity. Does not protect from overflows, but if you have 2^256 ids, you have other problems. (But actually, it's generally impossible to increment a counter this many times, energy wise so it's not something you have to worry about.)"
  }
}